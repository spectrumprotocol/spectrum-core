{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "description": "This structure describes the query functions available in the contract.",
  "oneOf": [
    {
      "description": "Returns information about the maker configs that contains in the [`ConfigResponse`]",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns the balance for each asset in the specified input parameters",
      "type": "object",
      "required": [
        "balances"
      ],
      "properties": {
        "balances": {
          "type": "object",
          "required": [
            "assets"
          ],
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Denom"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns list of bridge assets",
      "type": "object",
      "required": [
        "bridges"
      ],
      "properties": {
        "bridges": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Simulate collects and swaps fee tokens to stablecoin",
      "type": "object",
      "required": [
        "collect_simulation"
      ],
      "properties": {
        "collect_simulation": {
          "type": "object",
          "required": [
            "assets"
          ],
          "properties": {
            "assets": {
              "description": "The assets to swap to stablecoin",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetWithLimit"
              }
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AssetWithLimit": {
      "description": "This struct holds parameters to help with swapping a specific amount of a fee token to ASTRO.",
      "type": "object",
      "required": [
        "info"
      ],
      "properties": {
        "info": {
          "description": "Information about the fee token to swap",
          "allOf": [
            {
              "$ref": "#/definitions/Denom"
            }
          ]
        },
        "limit": {
          "description": "The amount of tokens to swap",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Denom": {
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
