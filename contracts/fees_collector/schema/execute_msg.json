{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "This structure describes the functions that can be executed in this contract.",
  "oneOf": [
    {
      "description": "Collects and swaps fee tokens to stablecoin",
      "type": "object",
      "required": [
        "collect"
      ],
      "properties": {
        "collect": {
          "type": "object",
          "required": [
            "assets"
          ],
          "properties": {
            "assets": {
              "description": "The assets to swap to stablecoin",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetWithLimit"
              }
            },
            "minimum_receive": {
              "description": "The minimum expected amount of stablecoine",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Updates contract config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "factory_contract": {
              "description": "The factory contract address",
              "type": [
                "string",
                "null"
              ]
            },
            "operator": {
              "description": "The operator address",
              "type": [
                "string",
                "null"
              ]
            },
            "target_list": {
              "description": "The list of target address to receive fees in stablecoin",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Add bridge tokens used to swap specific fee tokens to stablecoin (effectively declaring a swap route)",
      "type": "object",
      "required": [
        "update_bridges"
      ],
      "properties": {
        "update_bridges": {
          "type": "object",
          "properties": {
            "add": {
              "description": "List of bridge assets to be added",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/definitions/AssetInfo"
                  },
                  {
                    "$ref": "#/definitions/AssetInfo"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "remove": {
              "description": "List of asset to be removed",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/AssetInfo"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swap fee tokens via bridge assets",
      "type": "object",
      "required": [
        "swap_bridge_assets"
      ],
      "properties": {
        "swap_bridge_assets": {
          "type": "object",
          "required": [
            "assets",
            "depth"
          ],
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfo"
              }
            },
            "depth": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Distribute stablecoin to beneficiary",
      "type": "object",
      "required": [
        "distribute_fees"
      ],
      "properties": {
        "distribute_fees": {
          "type": "object",
          "properties": {
            "minimum_receive": {
              "description": "The minimum expected amount of stablecoine",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Creates a request to change the contract's ownership",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "owner"
          ],
          "properties": {
            "expires_in": {
              "description": "The validity period of the proposal to change the owner",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "description": "The newly proposed owner",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Removes a request to change contract ownership",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claims contract ownership",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AssetWithLimit": {
      "description": "This struct holds parameters to help with swapping a specific amount of a fee token to ASTRO.",
      "type": "object",
      "required": [
        "info"
      ],
      "properties": {
        "info": {
          "description": "Information about the fee token to swap",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        },
        "limit": {
          "description": "The amount of tokens to swap",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
